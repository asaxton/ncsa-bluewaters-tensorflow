#!/bin/bash

#PBS -l nodes=16:ppn=1:xk
#PBS -l walltime=02:00:00
#PBS -N BuildImageNetTFRecords
#PBS -e logs/log.${PBS_JOBNAME}_${PBS_JOBID}.err
#PBS -o logs/log.${PBS_JOBNAME}_${PBS_JOBID}.out

## For more options, consult https://bluewaters.ncsa.illinois.edu/batch-jobs

cd $PBS_O_WORKDIR

module load bwpy/0.3.1
module load tensorflow

echo "Starting"

MODE="train"
#MODE="validation"

RAW_DATA_DIR="${HOME}/scratch/ImageNet/raw-imagenet/$MODE"
DATA_LIST_FILE="${MODE}_files.txt"
META_DATA_FILE="$PBS_O_WORKDIR/../../models/research/inception/inception/data/imagenet_metadata.txt"
OUTPUT_DIR="${HOME}/scratch/ImageNet/tf_records/${MODE}"
LOG_DIR="logs/build_imagenet_data_${PBS_JOBID}"

mkdir -p ${HOME}/scratch/ImageNet/tf_records
mkdir -p $LOG_DIR

# make sure to submit this script to the queue from the directoy
# that build_imagenet_data.pbs is in.
NUM_DIV=$(cat $PBS_NODEFILE | wc -l)

RUN_CMD="python build_imagenet_data.py"
RUN_ARGUMENTS="--name ${MODE} \
--data_dir $RAW_DATA_DIR \
--output_directory $OUTPUT_DIR \
--imagenet_metadata_file $META_DATA_FILE \
--data_list_file $DATA_LIST_FILE \
--shards 1024 \
--proc_tot $NUM_DIV \
--distributed"

let r=$NUM_DIV-1

TOT_LENGTH=$(wc -l $DATA_LIST_FILE | cut -d " " -f1)

if [[ -d $OUTPUT_DIR ]]; then
    echo "Removing existing output directory and its contents: $OUTPUT_DIR"
    rm -rf $OUTPUT_DIR
    echo "Finished removing existing output directory and its contents: ${OUTPUT_DIR}"
fi
mkdir $OUTPUT_DIR

BB_RUN_SCRIPT=do_bb.sh
TF_RUN_SCRIPT=do_tf.sh


cat > $BB_RUN_SCRIPT << EOF
#!/bin/bash

set -e

index=\$ALPS_APP_PE
echo "\$index: starting $RUN_SCRIPT"

SPACING_ARG="--proc_index \$index"

RUN_BBOX="$RUN_CMD $RUN_ARGUMENTS \$SPACING_ARG --gen_bbox_store"

echo "Starting BBox">  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.err
echo "Starting BBox">  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.out

\$RUN_BBOX 1>> $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.out \\
2>> $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.err

echo "done BBox" >>  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.err
echo "done BBox" >>  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.out
EOF

chmod u=rwx $BB_RUN_SCRIPT
echo "Executing aprun -b -n $PBS_NUM_NODES -N 1 -- $BB_RUN_SCRIPT"
aprun -b -n $PBS_NUM_NODES -N 1 -- $BB_RUN_SCRIPT

cat > $TF_RUN_SCRIPT << EOF
#!/bin/bash

set -e

index=\$ALPS_APP_PE
echo "\$index: starting $RUN_SCRIPT"

SPACING_ARG="--proc_index \$index"

echo "Starting tf_record" >>  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.err
echo "Starting tf_record" >>  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.out

RUN_TF_RECORD="$RUN_CMD $RUN_ARGUMENTS \$SPACING_ARG"

\$RUN_TF_RECORD 1>> $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.out \\
2>> $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.err

echo "done tf_record" >>  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.err
echo "done tf_record" >>  $LOG_DIR/\${PBS_JOBNAME}_index_\${index}_of_${NUM_DIV}_jobid_\${PBS_JOBID}.out
EOF

chmod u=rwx $TF_RUN_SCRIPT
echo "Executing aprun -b -n $PBS_NUM_NODES -N 1 -- $TF_RUN_SCRIPT"
aprun -b -n $PBS_NUM_NODES -N 1 -- $TF_RUN_SCRIPT

echo "Done!"
